// automatically generated by the FlatBuffers compiler, do not modify

package CSProto;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class InputMagnetometer extends Table {
  public static InputMagnetometer getRootAsInputMagnetometer(ByteBuffer _bb) { return getRootAsInputMagnetometer(_bb, new InputMagnetometer()); }
  public static InputMagnetometer getRootAsInputMagnetometer(ByteBuffer _bb, InputMagnetometer obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public InputMagnetometer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float x() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float y() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float z() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createInputMagnetometer(FlatBufferBuilder builder,
      float x,
      float y,
      float z) {
    builder.startObject(3);
    InputMagnetometer.addZ(builder, z);
    InputMagnetometer.addY(builder, y);
    InputMagnetometer.addX(builder, x);
    return InputMagnetometer.endInputMagnetometer(builder);
  }

  public static void startInputMagnetometer(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addX(FlatBufferBuilder builder, float x) { builder.addFloat(0, x, 0.0f); }
  public static void addY(FlatBufferBuilder builder, float y) { builder.addFloat(1, y, 0.0f); }
  public static void addZ(FlatBufferBuilder builder, float z) { builder.addFloat(2, z, 0.0f); }
  public static int endInputMagnetometer(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

