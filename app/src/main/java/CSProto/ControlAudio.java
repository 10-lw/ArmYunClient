// automatically generated by the FlatBuffers compiler, do not modify

package CSProto;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ControlAudio extends Table {
  public static ControlAudio getRootAsControlAudio(ByteBuffer _bb) { return getRootAsControlAudio(_bb, new ControlAudio()); }
  public static ControlAudio getRootAsControlAudio(ByteBuffer _bb, ControlAudio obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ControlAudio __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int mode() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long bitrate() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 131072L; }

  public static int createControlAudio(FlatBufferBuilder builder,
      int mode,
      long bitrate) {
    builder.startObject(2);
    ControlAudio.addBitrate(builder, bitrate);
    ControlAudio.addMode(builder, mode);
    return ControlAudio.endControlAudio(builder);
  }

  public static void startControlAudio(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addMode(FlatBufferBuilder builder, int mode) { builder.addByte(0, (byte)mode, (byte)0); }
  public static void addBitrate(FlatBufferBuilder builder, long bitrate) { builder.addInt(1, (int)bitrate, (int)131072L); }
  public static int endControlAudio(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

